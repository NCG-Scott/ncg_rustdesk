name: Windows x64 Build (NCG defaults)

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Release tag (e.g. v1.4.1-ncg1). Leave blank to skip release."
        required: false
        default: ""
  push:
    branches: [ master ]
    paths:
      - ".github/workflows/windows_build.yml"
      - "force-run.txt"

permissions:
  contents: write

env:
  RUST_VERSION: "1.75"
  LLVM_VERSION: "15.0.6"
  FLUTTER_VERSION: "3.24.5"

jobs:
  generate-bridge:
    uses: ./.github/workflows/bridge.yml

  build-RustDeskTempTopMostWindow:
    uses: ./.github/workflows/third-party-RustDeskTempTopMostWindow.yml
    with:
      upload-artifact: true
      target: windows-2022
      configuration: Release
      platform: x64
      target_version: Windows10

  windows-x64:
    name: x86_64-pc-windows-msvc
    needs: [build-RustDeskTempTopMostWindow, generate-bridge]
    runs-on: windows-2022
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      # Point submodule to YOUR fork/branch so defaults are baked in
      - name: Use NCG hbb_common defaults
        shell: bash
        run: |
          git -C libs/hbb_common remote set-url origin https://github.com/NCG-Scott/hbb_common.git
          git -C libs/hbb_common fetch origin ncg-defaults
          git -C libs/hbb_common checkout ncg-defaults
          echo "hbb_common commit: $(git -C libs/hbb_common rev-parse --short HEAD)"

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: clippy,rustfmt

      - name: Setup LLVM (primary)
        id: llvm
        uses: KyleMayes/install-llvm-action@v2
        continue-on-error: true
        with:
          version: "15.0.7"
          directory: C:\llvm

      - name: Fallback: install LLVM via Chocolatey
        if: steps.llvm.outcome != 'success'
        shell: pwsh
        run: |
          choco install -y llvm --version=15.0.7
          echo "$env:ProgramFiles\LLVM\bin" | Out-File -FilePath $env:GITHUB_PATH -Append
          if (!(Test-Path 'C:\llvm')) { New-Item -ItemType Junction -Path 'C:\llvm' -Target "$env:ProgramFiles\LLVM" | Out-Null }
          clang --version

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Enable long paths
        run: git config --system core.longpaths true
        shell: pwsh

      # >>> vcpkg bootstrap + ports (required for magnum-opus / opus)
      - name: Bootstrap vcpkg and install ports
        shell: pwsh
        run: |
          $Vcpkg = Join-Path $env:GITHUB_WORKSPACE 'vcpkg'
          if (!(Test-Path $Vcpkg)) {
            git clone --depth 1 https://github.com/microsoft/vcpkg $Vcpkg
          }
          Push-Location $Vcpkg
          .\bootstrap-vcpkg.bat
          .\vcpkg.exe version
          # Install the exact ports RustDesk expects on Windows (static triplet)
          .\vcpkg.exe install libvpx:x64-windows-static libyuv:x64-windows-static opus:x64-windows-static aom:x64-windows-static
          Pop-Location
          # Make VCPKG_ROOT available to later steps too
          "VCPKG_ROOT=$Vcpkg" | Out-File -FilePath $env:GITHUB_ENV -Append
          "VCPKG_DEFAULT_TRIPLET=x64-windows-static" | Out-File -FilePath $env:GITHUB_ENV -Append

      # Optional: belt-and-suspenders so cargo definitely sees env
      - name: Ensure cargo sees VCPKG_ROOT
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force .cargo | Out-Null
          $cfg = @"
[env]
VCPKG_ROOT = "${{ github.workspace }}\vcpkg"
VCPKG_DEFAULT_TRIPLET = "x64-windows-static"
"@
          $cfg | Out-File .cargo\config.toml -Encoding UTF8
          Get-Content .cargo\config.toml

      - name: Build Windows (Flutter + Rust)
        shell: pwsh
        env:
          # Critical envs for bindgen + magnum-opus
          VCPKG_ROOT: ${{ github.workspace }}\vcpkg
          VCPKG_DEFAULT_TRIPLET: x64-windows-static
          LIBCLANG_PATH: C:\llvm\bin
        run: |
          Write-Host "VCPKG_ROOT=$env:VCPKG_ROOT"
          Get-ChildItem "$env:VCPKG_ROOT\installed\x64-windows-static\include" | Select-Object -First 3
          python --version
          python build.py --flutter

      - name: Build MSI
        shell: pwsh
        run: |
          msbuild .\res\msi\Package\Package.wixproj /p:Configuration=Release /p:Platform=x64
          New-Item -ItemType Directory -Force -Path .\Out | Out-Null
          Get-ChildItem res\msi\Package\bin\Release\*.msi | Copy-Item -Destination .\Out\
          if (Test-Path .\rustdesk-*.exe) { Copy-Item .\rustdesk-*.exe .\Out\ }

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rustdesk-windows-x64
          path: Out\*

      - name: Create release (optional)
        if: ${{ github.event.inputs.tag != '' }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.tag }}
          files: Out\*
          prerelease: false

