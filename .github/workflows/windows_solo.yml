name: Windows x64 Build (NCG defaults - Solo)

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Release tag (e.g. v1.4.1-ncg1). Leave blank to skip release."
        required: false
        default: ""
  push:
    branches: [ master ]
    paths:
      - ".github/workflows/windows_solo.yml"
      - "force-run.txt"

permissions:
  contents: write

env:
  RUST_VERSION: "1.75"
  LLVM_VERSION: "15.0.7"
  # Match bridge job's Flutter to avoid FRB/API drift
  FLUTTER_VERSION: "3.22.3"

jobs:
  # 1) Generate Flutter<->Rust bridge (your existing reusable workflow)
  generate-bridge:
    uses: ./.github/workflows/bridge.yml

  # 2) Build Windows after bridge is generated
  windows-x64:
    name: x86_64-pc-windows-msvc (solo)
    needs: [generate-bridge]
    runs-on: windows-2022
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      # Pull in bridge files produced by the generate-bridge job
      - name: Download bridge artifact
        uses: actions/download-artifact@v4
        with:
          name: bridge-artifact
          path: .
      - name: Verify bridge files exist
        shell: pwsh
        run: |
          dir src
          if (!(Test-Path "src\bridge_generated.rs")) { throw "bridge_generated.rs missing after download." }
          if (!(Test-Path "flutter\lib\generated_bridge.dart")) { throw "generated_bridge.dart missing after download." }

      # Rust toolchain
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: clippy,rustfmt

      # LLVM / libclang for bindgen
      - name: Setup LLVM (primary)
        id: llvm
        uses: KyleMayes/install-llvm-action@v2
        continue-on-error: true
        with:
          version: ${{ env.LLVM_VERSION }}
          directory: C:\llvm

      - name: "Fallback: install LLVM via Chocolatey"
        if: ${{ steps.llvm.outcome != 'success' }}
        shell: pwsh
        run: |
          choco install -y llvm --version=${{ env.LLVM_VERSION }}
          echo "$env:ProgramFiles\LLVM\bin" | Out-File -FilePath $env:GITHUB_PATH -Append
          if (!(Test-Path 'C:\llvm')) { New-Item -ItemType Junction -Path 'C:\llvm' -Target "$env:ProgramFiles\LLVM" | Out-Null }
          clang --version

      - name: Export LIBCLANG_PATH
        shell: pwsh
        run: |
          $p = "C:\llvm\bin"
          if (-not (Test-Path $p)) { $p = "$env:ProgramFiles\LLVM\bin" }
          if (-not (Test-Path $p)) { throw "libclang (LLVM bin) not found" }
          "LIBCLANG_PATH=$p" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "LIBCLANG_PATH=$p"

      # Flutter SDK (match bridge job)
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: ${{ env.FLUTTER_VERSION }}

      # vcpkg: install codecs RustDesk expects (static)
      - name: Setup vcpkg and install ports
        shell: pwsh
        run: |
          if (!(Test-Path C:\vcpkg)) {
            git clone --depth 1 https://github.com/microsoft/vcpkg C:\vcpkg
          }
          cd C:\vcpkg
          .\bootstrap-vcpkg.bat -disableMetrics
          .\vcpkg.exe version
          .\vcpkg.exe install libvpx:x64-windows-static libyuv:x64-windows-static opus:x64-windows-static aom:x64-windows-static
          "VCPKG_ROOT=C:\vcpkg" | Out-File -FilePath $env:GITHUB_ENV -Append
          "VCPKG_DEFAULT_TRIPLET=x64-windows-static" | Out-File -FilePath $env:GITHUB_ENV -Append

      # Also tell Cargo build scripts
      - name: Ensure Cargo sees VCPKG env
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force .cargo | Out-Null
          $cfg = "[env]`r`nVCPKG_ROOT = `"C:\\vcpkg`"`r`nVCPKG_DEFAULT_TRIPLET = `"x64-windows-static`"`r`n"
          Set-Content -Path .cargo\config.toml -Value $cfg -Encoding UTF8
          Get-Content .cargo\config.toml

      - name: Enable long paths
        shell: pwsh
        run: git config --system core.longpaths true

      # PATCH: keep extended_text compatible with Dart 3.4.x (Flutter 3.22.x)
      - name: Patch extended_text to 13.0.0 and pub get
        shell: pwsh
        run: |
          $pubspec = "flutter\pubspec.yaml"
          if (!(Test-Path $pubspec)) { throw "pubspec.yaml not found at $pubspec" }
          (Get-Content $pubspec) -replace 'extended_text:\s*14\.0\.0','extended_text: 13.0.0' |
            Set-Content $pubspec -Encoding UTF8
          flutter pub get

      # Build Windows app
      - name: Build Windows (Flutter + Rust)
        shell: pwsh
        env:
          VCPKG_ROOT: C:\vcpkg
          VCPKG_DEFAULT_TRIPLET: x64-windows-static
          LIBCLANG_PATH: ${{ env.LIBCLANG_PATH }}
          RUST_BACKTRACE: 1
        run: |
          Write-Host "VCPKG_ROOT=$env:VCPKG_ROOT"
          Write-Host "VCPKG_DEFAULT_TRIPLET=$env:VCPKG_DEFAULT_TRIPLET"
          if (!(Test-Path "$env:VCPKG_ROOT\installed\x64-windows-static\include")) {
            throw "vcpkg includes are missing; vcpkg install step failed"
          }
          Get-ChildItem "$env:VCPKG_ROOT\installed\x64-windows-static\include" | Select-Object -First 5 | Format-List | Out-Host
          python --version
          python build.py --flutter

      # Package MSI & upload
      - name: Build MSI
        shell: pwsh
        run: |
          msbuild .\res\msi\Package\Package.wixproj /p:Configuration=Release /p:Platform=x64
          New-Item -ItemType Directory -Force -Path .\Out | Out-Null
          Get-ChildItem res\msi\Package\bin\Release\*.msi | Copy-Item -Destination .\Out\
          if (Test-Path .\rustdesk-*.exe) { Copy-Item .\rustdesk-*.exe .\Out\ }

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rustdesk-windows-x64
          path: Out\*

